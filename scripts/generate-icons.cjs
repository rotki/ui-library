const path = require('node:path');
const { readdir, writeFile } = require('node:fs/promises');
const { readFile } = require('node:fs/promises');
const { pascalCase } = require('scule');
const { XMLParser } = require('fast-xml-parser');

const PREFIX = 'ri-';
const TARGET = 'all-icons.ts';

function resolveRoot(...dir) {
  return path.resolve(__dirname, '..', ...dir);
}

function resolveRemixIconDir(...dir) {
  return path.resolve(
    __dirname,
    '..',
    'node_modules',
    'remixicon',
    'icons',
    ...dir
  );
}

async function loop(data, cb) {
  for (const el of data) {
    await cb(el);
  }
}

function getPathFromSvgString(svg) {
  const parser = new XMLParser({
    ignoreAttributes: false,
  });
  const obj = parser.parse(svg);
  return obj.svg.path['@_d'];
}

async function collectAllIconMetas() {
  const res = [];
  const categoryDirs = await readdir(resolveRemixIconDir());

  await loop(categoryDirs, async (categoryDir) => {
    const iconsDirs = await readdir(resolveRemixIconDir(categoryDir));

    await loop(iconsDirs, async (iconName) => {
      const name = PREFIX + path.basename(iconName).replace('.svg', '');
      const generatedName = pascalCase(name);
      const svg = await readFile(
        resolveRemixIconDir(categoryDir, iconName),
        'utf8'
      );
      const svgPath = getPathFromSvgString(svg);

      res.push({
        name,
        generatedName,
        svgPath,
      });
    });
  });

  return res;
}

async function generate() {
  const metadata = await collectAllIconMetas();
  const fileContent = await collectIconConstantString(metadata);
  await writeFile(resolveRoot(TARGET), fileContent, 'utf8');
}

async function collectIconConstantString(icons) {
  let iconsFile = `// Generated by scripts/generate-icons.js
/* eslint-disable */
/* prettier-ignore */
import { type GeneratedIcon } from '@/types/icons';\n
`;

  await loop(icons, (icon) => {
    iconsFile += `export const ${icon.generatedName}: GeneratedIcon = {
  name: '${icon.name}',
  path: '${icon.svgPath}',
};\n`;
  });

  return iconsFile;
}

generate();
